{"version":3,"sources":["convertHexToRGB.js","components/Converter.js","App.js","reportWebVitals.js","index.js"],"names":["convertHexToRGB","hexColor","decDigits","toLowerCase","replace","split","map","item","number","parseInt","Number","isNaN","codePointAt","reduce","acc","index","push","length","join","Converter","useState","hex","rgb","form","setForm","useEffect","document","body","style","backgroundColor","className","onInput","event","value","target","prevForm","test","type","name","maxLength","autoComplete","autoFocus","defaultValue","color","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wRAAe,SAASA,EAAgBC,GACtC,IASMC,EATYD,EACfE,cACAC,QAAQ,IAAK,IACbC,MAAM,IACNC,KAAI,SAACC,GACJ,IAAMC,EAASC,SAASF,EAAM,IAC9B,OAAOG,OAAOC,MAAMH,GAAUD,EAAKK,cAAgB,GAAKJ,KAGhCK,QAAO,SAACC,EAAKP,EAAMQ,GAO7C,OANIA,EAAQ,IAAM,EAChBD,EAAIE,KAAY,GAAPT,GAETO,EAAIA,EAAIG,OAAS,IAAMV,EAGlBO,IACN,IAIH,MAFoB,cAAUZ,EAAUgB,KAAK,MAAzB,K,WChBP,SAASC,IAAa,IAAD,EACVC,mBAAS,CAAEC,IAAK,GAAIC,IAAK,KADf,mBAC3BC,EAD2B,KACrBC,EADqB,KAmBlC,OAhBAC,qBAAU,WACRC,SAASC,KAAKC,MAAMC,gBAAkBN,EAAKD,MAC1C,CAACC,EAAKD,MAeP,uBAAMQ,UAAU,iBAAiBC,QAbnC,SAA2BC,GAAQ,IACzBC,EAAUD,EAAME,OAAhBD,MAERT,GAAQ,SAAAW,GAAQ,kCAAUA,GAAV,IAAoBd,IAAKY,OAErC,mBAAmBG,KAAKH,GAC1BT,GAAQ,SAAAW,GAAQ,kCAAUA,GAAV,IAAoBb,IAAKtB,EAAgBiC,QAC/B,IAAjBA,EAAMhB,QACfO,GAAQ,SAAAW,GAAQ,kCAAUA,GAAV,IAAoBb,IAAK,8CAK3C,UACE,uBACEQ,UAAU,kBACVO,KAAK,OACLC,KAAK,MACLC,UAAU,IACVC,aAAa,MACbC,WAAS,EACTC,aAAcnB,EAAKF,MAErB,wBACES,UAAU,mBACVO,KAAK,OACLC,KAAK,MACLV,MAAO,CAAEC,gBAAiBN,EAAKD,KAJjC,SAME,sBACEQ,UAAU,wBACVF,MAAO,CAAEe,MAAOpB,EAAKD,KAFvB,SAIGC,EAAKD,WCjCDsB,MARf,WACE,OACE,qBAAKd,UAAU,gBAAf,SACE,cAAC,EAAD,OCMSe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9B,SAAS+B,eAAe,SAM1BZ,M","file":"static/js/main.25b03f16.chunk.js","sourcesContent":["export default function convertHexToRGB(hexColor) {\n  const hexDigits = hexColor\n    .toLowerCase()\n    .replace('#', '')\n    .split('')\n    .map((item) => {\n      const number = parseInt(item, 10);\n      return Number.isNaN(number) ? item.codePointAt() - 87 : number;\n    });\n\n  const decDigits = hexDigits.reduce((acc, item, index) => {\n    if (index % 2 === 0) {\n      acc.push(item * 16)\n    } else {\n      acc[acc.length - 1] += item;\n    }\n\n    return acc;\n  }, []);\n\n  const convertedColor = `rgb(${decDigits.join(', ')})`;\n\n  return convertedColor;\n}\n","import { useState, useEffect } from 'react';\nimport './Converter.css';\nimport convertHexToRGB from '../convertHexToRGB';\n\nexport default function Converter() {\n  const [form, setForm] = useState({ hex: '', rgb: '' });\n\n  useEffect(() => {\n    document.body.style.backgroundColor = form.rgb;\n  }, [form.rgb])\n\n  function handleInputChange(event) {\n    const { value } = event.target;\n\n    setForm(prevForm => ({ ...prevForm, hex: value }));\n\n    if (/^#[\\dA-Fa-f]{6}$/.test(value)) {\n      setForm(prevForm => ({ ...prevForm, rgb: convertHexToRGB(value) }));\n    } else if (value.length === 7) {\n      setForm(prevForm => ({ ...prevForm, rgb: 'Ошибка!' }));\n    }\n  }\n\n  return (\n    <form className=\"Converter-form\" onInput={handleInputChange}>\n      <input\n        className=\"Converter-input\"\n        type=\"text\"\n        name=\"hex\"\n        maxLength=\"7\"\n        autoComplete=\"off\"\n        autoFocus\n        defaultValue={form.hex}\n      />\n      <output\n        className=\"Converter-output\"\n        type=\"text\"\n        name=\"rgb\"\n        style={{ backgroundColor: form.rgb }}\n      >\n        <span\n          className=\"Converter-output-text\"\n          style={{ color: form.rgb }}\n        >\n          {form.rgb}\n        </span>\n      </output>\n    </form>\n  );\n}\n","import './App.css';\nimport Converter from './components/Converter';\n\nfunction App() {\n  return (\n    <div className=\"App-container\">\n      <Converter />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}